basePath: /api
definitions:
  controllers.MovieCreatorItem:
    properties:
      date:
        type: string
      desc:
        type: string
      location:
        type: string
      pic:
        type: string
      rating:
        type: string
      title:
        type: string
      title_zh:
        type: string
      wiki_url:
        type: string
    required:
    - date
    - desc
    - location
    - pic
    - rating
    - title
    - title_zh
    - wiki_url
    type: object
  controllers.MovieItemResponse:
    properties:
      item:
        $ref: '#/definitions/models.Movie'
    type: object
  controllers.MoviesListResponse:
    properties:
      currentPage:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      totalItem:
        type: integer
      totalPage:
        type: integer
    type: object
  controllers.NonMovieCreatorItem:
    properties:
      date:
        type: string
      desc:
        type: string
      location:
        type: string
      pic:
        type: string
      rating:
        type: string
      title:
        type: string
    required:
    - date
    - desc
    - location
    - pic
    - rating
    - title
    type: object
  controllers.NonMovieItemResponse:
    properties:
      item:
        $ref: '#/definitions/models.NonMovie'
    type: object
  controllers.NonMoviesListResponse:
    properties:
      currentPage:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.NonMovie'
        type: array
      totalItem:
        type: integer
      totalPage:
        type: integer
    type: object
  models.Movie:
    properties:
      date:
        type: string
      desc:
        type: string
      id:
        type: integer
      location:
        type: string
      pic:
        type: string
      rating:
        type: string
      title:
        type: string
      title_zh:
        type: string
      wiki_url:
        type: string
    required:
    - date
    - desc
    - location
    - pic
    - rating
    - title
    - title_zh
    type: object
  models.NonMovie:
    properties:
      date:
        type: string
      desc:
        type: string
      id:
        type: integer
      location:
        type: string
      pic:
        type: string
      rating:
        type: string
      title:
        type: string
    required:
    - date
    - desc
    - location
    - pic
    - rating
    - title
    type: object
  models.User:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: localhost:8080
info:
  contact:
    name: charmaine.kwok
  description: This is an API server for communication between mobile application
    and MongoDB Database.
  license:
    name: Apache 2.0
  title: Movie Api
  version: 1.0.0
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: JWT token
          schema:
            type: string
        "400":
          description: Invalid username or password
        "500":
          description: Internal server error
      summary: Login user
      tags:
      - Users
  /movies:
    get:
      consumes:
      - application/json
      description: Get a list of movie information
      parameters:
      - description: Server JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page Number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies Information
          schema:
            $ref: '#/definitions/controllers.MoviesListResponse'
        "400":
          description: Invalid user_id
        "500":
          description: Internal server error
      summary: Get a list of movie information
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Create movie entry
      parameters:
      - description: Server JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Movie details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.MovieCreatorItem'
      produces:
      - application/json
      responses:
        "201":
          description: Movie Information
          schema:
            $ref: '#/definitions/controllers.MovieItemResponse'
        "400":
          description: Invalid request body
        "500":
          description: Internal server error
      summary: Create movie entry
      tags:
      - Movies
  /movies/{itemId}:
    get:
      consumes:
      - application/json
      description: Get movie information by item id
      parameters:
      - description: Server JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Item id
        in: path
        name: itemId
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Movie Information
          schema:
            $ref: '#/definitions/controllers.MovieItemResponse'
        "404":
          description: No item found
        "500":
          description: Internal server error
      summary: Get movie information by item id
      tags:
      - Movies
  /non-movies:
    get:
      consumes:
      - application/json
      description: Get a list of non-movie information
      parameters:
      - description: Server JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page Number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Non-Movie Information
          schema:
            $ref: '#/definitions/controllers.NonMoviesListResponse'
        "400":
          description: Invalid user_id
        "500":
          description: Internal server error
      summary: Get a list of non-movie information
      tags:
      - Non-movies
    post:
      consumes:
      - application/json
      description: Create non-movie entry
      parameters:
      - description: Server JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Non-Movie details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.NonMovieCreatorItem'
      produces:
      - application/json
      responses:
        "201":
          description: Non-Movie Information
          schema:
            $ref: '#/definitions/controllers.NonMovieItemResponse'
        "400":
          description: Invalid request body
        "500":
          description: Internal server error
      summary: Create non-movie entry
      tags:
      - Non-movies
  /non-movies/{itemId}:
    get:
      consumes:
      - application/json
      description: Get non-movie information by item id
      parameters:
      - description: Server JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Item id
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Non-Movie Information
          schema:
            $ref: '#/definitions/controllers.NonMovieItemResponse'
        "404":
          description: No item found
        "500":
          description: Internal server error
      summary: Get non-movie information by item id
      tags:
      - Non-movies
  /user:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: User created
        "400":
          description: Invalid request body
        "500":
          description: Internal server error
      summary: Create user
      tags:
      - Users
swagger: "2.0"
